## Import packages
import pandas as pd
import json
import os

configfile: "config.json"

# Set path to root dir
os.chdir('../../../../')

## Flag to indicate rules that will be run locally (e.g. not submitted to slurm)
#localrules:

### Report data
#report: "report/workflow.rst"

##################################
# Read config vars and lists
dset_name = config["dset_name"]
input_rois = config["input_rois"]
input_demog = config["input_demog"]
dir_output = config["dir_output"]
derived_rois = config["list_derived_ROIs"]
rois = config["list_ROIs_all"]
rois_single = config["list_ROIs_single"]
rois_primary = config["list_ROIs_primary"]
spare_types = config["SPARE_types"]
model_combat = config["model_combat"]
seg_types = config["seg_types"]
corr_type = config["corr_type"]

## Set output file name
OUT_FILE = f"{dir_output}/out_combined/{{dset_name}}_All.csv"
OUT_FILE = f"{dir_output}/out_rois/{dset_name}_raw.csv"
OUT_FILE = f"{dir_output}/combined/{dset_name}_raw.csv"
OUT_FILE = f"{dir_output}/sel_vars/{dset_name}_raw.csv"
OUT_FILE = f"{dir_output}/filtered_data/{dset_name}_raw.csv"
OUT_FILE = f"{dir_output}/out_combat/{dset_name}_COMBAT_single.csv"
OUT_FILE = f"{dir_output}/out_combat/{dset_name}_COMBAT_all.csv"
OUT_FILE = f"{dir_output}/spare/{dset_name}_COMBAT_withcovar.csv"
OUT_FILE = f"{dir_output}/spare/{dset_name}_COMBAT.csv"
OUT_FILE = f"{dir_output}/out_spare/{dset_name}_COMBAT_SPARE-AD.csv"
OUT_FILE = f"{dir_output}/out_spare/{dset_name}_COMBAT_SPARE-Scores.csv"
OUT_FILE = f"{dir_output}/out_combined/{dset_name}_All.csv"

## Rules
rule ALL:
    '''
    First rule: lists the final expected out files
    '''
    input: OUT_FILE

#ruleorder: rename_rois_user > rename_rois_computed

rule rename_rois:
    '''
    Rename MUSE roi indices to roi codes
    '''
    input:
        roi=f"{input_rois}",
        dict=f"src/workflow/{rois}"
    output:
        f"{dir_output}/out_rois/{dset_name}_raw.csv"
    params:
        var_from = 'Index',
        var_to = 'Code'
    resources:
        mem_mb=8000
    shell:
        "python src/workflow/utils/generic/util_rename_df_columns.py {input} {params} {output}"

rule correct_icv:
    '''
    Normalize ROIs. Values are scaled either by a constant factor (NormICV) or 100 (PercICV)
    '''
    input:
        f"{dir_output}/out_rois/{dset_name}_raw.csv"
    params:
        icv_var = 'MUSE_702',
        exclude_vars = 'MRID',
        suffix = 'NONE'
    output:
        f"{dir_output}/out_rois/{dset_name}_{corr_type}.csv"
    resources:
        mem_mb=8000
    shell:
        f"python src/workflow/utils/generic/util_corr_icv.py {{input}} {corr_type} {{params}} {{output}}"

rule merge_covars:
    '''
    Merge covars to ROIs
    '''
    input:
        covar=f"{input_demog}",
        roi=f"{dir_output}/out_rois/{dset_name}_raw.csv",
    params:
        key_var = 'MRID'
    output:
        temp(f"{dir_output}/combined/{dset_name}_raw.csv")
    resources:
        mem_mb=8000
    shell:
        "python src/workflow/utils/generic/util_merge_dfs.py {input} {params} {output}"

rule select_vars_harmonize:
    '''
    Select variables for harmonization
    '''
    input:
        in_csv=f"{dir_output}/combined/{dset_name}_raw.csv",
        dict_csv=f"src/workflow/{rois_single}"
    params:
        dict_var = 'Code',
        covars ='MRID,Age,Sex,SITE,DLICV',
    output:
        temp(f"{dir_output}/sel_vars/{dset_name}_raw.csv")
    resources:
        mem_mb=8000
    shell:
        "python src/workflow/utils/generic/util_select_vars.py {input} {params} {output}"

rule filter_age_harmonize:
    '''
    Check that sample has age range consistent with the model
    '''
    input:
        f"{dir_output}/sel_vars/{dset_name}_raw.csv",
    params:
        var_name='Age',
        min_val='50',
        max_val='95',
    output:
        f"{dir_output}/filtered_data/{dset_name}_raw.csv"
    resources:
        mem_mb=8000
    shell:
        "python src/workflow/utils/generic/util_filter_num_var.py {input} {params} {output}"

rule combat_apply:
    input:
        data=f"{dir_output}/filtered_data/{dset_name}_raw.csv",
        mdl=f"src/workflow/{model_combat}"
    output:
        f"{dir_output}/out_combat/{dset_name}_COMBAT_single.csv"
    shell:
        "bash src/workflow/utils/combat/util_combat_test.sh {input} {output}"

rule calc_derived_ROIs:
    '''
    Calculate derived ROIs from harmonized data
    - If the input data already includes derived ROIs, they will not be updated
    '''
    input:
        in_csv=f"{dir_output}/out_combat/{dset_name}_COMBAT_single.csv",
        dict=f"src/workflow/{derived_rois}"
    params:
        key_var='MRID',
        roi_prefix='MUSE_'
    output:
        f"{dir_output}/out_combat/{dset_name}_COMBAT_all.csv"
    resources:
        mem_mb=8000
    shell:
        "python src/workflow/utils/generic/util_combine_MUSE_rois.py {input} {params} {output}"

rule merge_covars_to_harmonized_rois:
    '''
    Merge covars to ROIs
    '''
    input:
        covar=f"{input_demog}",
        roi=f"{dir_output}/out_combat/{dset_name}_COMBAT_single.csv"
    params:
        key_var = 'MRID'
    output:
        temp(f"{dir_output}/spare/{dset_name}_COMBAT_withcovar.csv")
    resources:
        mem_mb=8000
    shell:
        "python src/workflow/utils/generic/util_merge_dfs.py {input} {params} {output}"

rule select_vars_spare:
    '''
    Select variables for harmonization
    '''
    input:
        in_csv=f"{dir_output}/spare/{dset_name}_COMBAT_withcovar.csv",
        dict_csv=f"src/workflow/{rois_single}"
    params:
        dict_var = 'Code',
        covars ='MRID,Age,Sex,DLICV',
    output:
        temp(f"{dir_output}/spare/{dset_name}_COMBAT.csv")
    resources:
        mem_mb=8000
    shell:
        "python src/workflow/utils/generic/util_select_vars.py {input} {params} {output}"

def get_spare_model(wildcards):
    model_name = config["model_SPARE-" + wildcards.stype]
    path_spare = "src/workflow/" + model_name
    return path_spare

rule spare_apply:
    input:
        data=f"{dir_output}/spare/{dset_name}_COMBAT.csv",
        mdl=get_spare_model
    output:
        temp(f"{dir_output}/out_spare/{dset_name}_COMBAT_SPARE-{{stype}}.csv")
    shell:
        "bash src/workflow/utils/spare/util_spare_test.sh {input} {wildcards.stype} {output}"

def get_spare_results(wildcards):
    data_spare=expand(f"{dir_output}/out_spare/{dset_name}_COMBAT_SPARE-{{stype}}.csv", stype = spare_types)
    return data_spare

rule spare_combine:
    input:
        get_spare_results
    output:
        csv=f"{dir_output}/out_spare/{dset_name}_COMBAT_SPARE-Scores.csv"
    shell:
        "python src/workflow/utils/generic/util_merge_dfs_multi.py {output} MRID {input}"

rule prep_output:
    '''
    Merge demog data to DLMUSE
    '''
    input:
        demog=f"{input_demog}",
        rois=f"src/workflow/{rois_primary}",
        out_raw=f"{dir_output}/out_rois/{dset_name}_raw.csv",
        out_corr=f"{dir_output}/out_rois/{dset_name}_{corr_type}.csv",
        out_harm=f"{dir_output}/out_combat/{dset_name}_COMBAT_all.csv",
        out_spare=f"{dir_output}/out_spare/{dset_name}_COMBAT_SPARE-Scores.csv"
    output:
        f"{dir_output}/out_combined/{dset_name}_All.csv"
    params:
        key_var = 'MRID'
    shell:
        "python src/workflow/utils/generic/util_combine_all.py {output} {input}"
